/* transaction is a single unit of work that consists of one or more operations. The most common and simple example of it is bank transfer from one account to other. Sender's balance should be decreased whereas receiver's balance 
shoulde be increased. PostgreSQL Transaction is atomic, consistent, isolated and durable which means ACID. 

Atomicity : guarantees that the transaction is completed in all-or-nothing manner.
Consistency : ensures that changes to data written to database are valid and adhere to predefined rules.
Isolation : determines how the integretiy of a transaction is visible to other transactions.
Durability : ensures that transactions that have been committed are permanently stored in the database.


Let me delve into transaction over a scenario
*/

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL CHECK(balance >= 0),
    PRIMARY KEY(id)
);

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

-- start a transaction
BEGIN;

-- insert a new row into the accounts table
INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

-- commit the change (or roll it back later)
COMMIT;

ROLLBACK TRANSACTION; -- it cancels transaction operation immediately.